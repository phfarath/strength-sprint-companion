generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password_hash String
  weight        Float?
  height        Float?
  birthdate     String?
  created_at    DateTime @default(now())

  // Relacionamentos
  nutritionGoals  NutritionGoals?
  deviceData      DeviceData[]
  foodDiaries     FoodDiary[]
  foods           Food[]
  mealPlans       MealPlan[]
  pointsLogs      PointsLog[]
  userBadges      UserBadge[]
  feedback        UserFeedback[]
  workoutPlans    WorkoutPlan[]
  workoutSessions WorkoutSession[]
  exercises       Exercise[] // ← ADICIONAR ESTA LINHA

  // Back-relations for settings & privacy models
  settings         UserSettings?
  consents         Consent[]
  deletionRequests DeletionRequest[]
  dataExportLogs   DataExportLog[]

  @@map("users")
}

model Exercise {
  id           Int      @id @default(autoincrement())
  name         String
  muscle_group String
  equipment    String?
  instructions String?
  user_id      Int?
  is_public    Boolean  @default(false)
  created_at   DateTime @default(now())

  user                   User?                    @relation(fields: [user_id], references: [id])
  workout_plan_exercises WorkoutPlanExercise[]
  session_exercises      WorkoutSessionExercise[]

  @@unique([name, muscle_group, user_id])
  @@map("exercises")
}

model Food {
  id               Int              @id @default(autoincrement())
  name             String
  weight           Float
  calories         Float
  protein          Float
  carbs            Float
  fat              Float
  userId           Int
  is_public        Boolean          @default(false)
  foodDiaryEntries FoodDiaryEntry[]
  user             User             @relation(fields: [userId], references: [id])
  mealFoods        MealFood[]

  @@map("foods")
}

model Badge {
  id          Int         @id @default(autoincrement())
  code        String      @unique
  title       String
  description String?
  userBadges  UserBadge[]

  @@map("badges")
}

model WorkoutPlan {
  id          Int      @id @default(autoincrement())
  name        String
  day_of_week Int // 0-6, domingo a sábado
  notes       String?
  user_id     Int
  is_public   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user      User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  exercises WorkoutPlanExercise[]
  sessions  WorkoutSession[]

  @@map("workout_plans")
}

model WorkoutPlanExercise {
  id              Int     @id @default(autoincrement())
  workout_plan_id Int
  exercise_id     Int
  sets            Int
  reps            Int
  weight_kg       Float
  rest_seconds    Int?
  notes           String?
  order_index     Int     @default(0)

  workout_plan WorkoutPlan @relation(fields: [workout_plan_id], references: [id], onDelete: Cascade)
  exercise     Exercise    @relation(fields: [exercise_id], references: [id])

  @@map("workout_plan_exercises")
}

model WorkoutSession {
  id              Int       @id @default(autoincrement())
  date            DateTime
  completed_at    DateTime?
  notes           String?
  user_id         Int
  workout_plan_id Int?
  created_at      DateTime  @default(now())

  user         User                     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  workout_plan WorkoutPlan?             @relation(fields: [workout_plan_id], references: [id])
  exercises    WorkoutSessionExercise[]

  @@map("workout_sessions")
}

model WorkoutSessionExercise {
  id               Int     @id @default(autoincrement())
  session_id       Int
  exercise_id      Int
  actual_sets      Int
  actual_reps      Int
  actual_weight_kg Float
  comments         String?

  session  WorkoutSession @relation(fields: [session_id], references: [id], onDelete: Cascade)
  exercise Exercise       @relation(fields: [exercise_id], references: [id])

  @@map("workout_session_exercises")
}

model FoodDiary {
  id         Int              @id @default(autoincrement())
  user_id    Int
  date       DateTime         @db.Date
  created_at DateTime         @default(now())
  user       User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  entries    FoodDiaryEntry[]

  @@map("food_diary")
}

model FoodDiaryEntry {
  diary_id  Int
  food_id   Int
  portion_g Decimal   @db.Decimal(7, 2)
  diary     FoodDiary @relation(fields: [diary_id], references: [id], onDelete: Cascade)
  food      Food      @relation(fields: [food_id], references: [id])

  @@id([diary_id, food_id])
  @@map("food_diary_entries")
}

model PointsLog {
  id         Int      @id @default(autoincrement())
  user_id    Int
  points     Int
  reason     String?
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("points_log")
}

model UserBadge {
  user_id    Int
  badge_id   Int
  awarded_at DateTime @default(now())
  badge      Badge    @relation(fields: [badge_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, badge_id])
  @@map("user_badges")
}

model DeviceData {
  id              Int      @id @default(autoincrement())
  user_id         Int
  date            DateTime @db.Date
  steps           Int?
  calories_burned Int?
  heart_rate_avg  Int?
  created_at      DateTime @default(now())
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("device_data")
}

model UserFeedback {
  id         Int      @id @default(autoincrement())
  user_id    Int?
  name       String?
  email      String?
  rating     Int?
  sentiment  Int?
  comment    String
  created_at DateTime @default(now())
  user       User?    @relation(fields: [user_id], references: [id])

  @@map("user_feedback")
}

model NutritionGoals {
  id       Int  @id @default(autoincrement())
  calories Int
  protein  Int
  carbs    Int
  fat      Int
  userId   Int  @unique
  user     User @relation(fields: [userId], references: [id])
}

model MealPlan {
  id        Int     @id @default(autoincrement())
  name      String
  date      String
  frequency String?
  notes     String?
  userId    Int
  is_public Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  meals     Meal[]  @relation("MealPlanMeals")

  @@map("meal_plans")
}

model Meal {
  id         Int        @id @default(autoincrement())
  name       String
  time       String?
  mealPlanId Int
  mealPlan   MealPlan   @relation("MealPlanMeals", fields: [mealPlanId], references: [id], onDelete: Cascade)
  mealFoods  MealFood[] @relation("MealMealFoods")

  @@map("meals")
}

model MealFood {
  id      Int   @id @default(autoincrement())
  mealId  Int
  meal    Meal  @relation("MealMealFoods", fields: [mealId], references: [id], onDelete: Cascade)
  quantity Float @default(1)
  foodId  Int
  food    Food  @relation(fields: [foodId], references: [id])

  @@map("meal_foods")
}

// ==============================
// Settings & Privacy (Phase 0)
// ==============================

model UserSettings {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  appearanceJson    String?  @db.Text
  a11yJson          String?  @db.Text
  notificationsJson String?  @db.Text
  aiJson            String?  @db.Text
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Consent {
  id        Int      @id @default(autoincrement())
  userId    Int
  kind      String   // analytics | marketing | ai_training | etc
  granted   Boolean
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, kind])
  @@map("consents")
}

model DeletionRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  status      String   // scheduled | completed | canceled
  scheduledAt DateTime?
  created_at  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@map("deletion_requests")
}

model DataExportLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  status     String   // pending | ready | error
  url        String?
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@map("data_export_logs")
}
