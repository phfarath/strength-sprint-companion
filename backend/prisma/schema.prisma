generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  email           String           @unique
  password_hash   String
  weight          Float?
  height          Float?
  birthdate       String?
  created_at      DateTime         @default(now())
  nutritionGoals  NutritionGoals?
  deviceData      DeviceData[]
  foodDiaries     FoodDiary[]
  foods           Food[]
  mealPlans       MealPlan[]
  pointsLogs      PointsLog[]
  userBadges      UserBadge[]
  feedback        UserFeedback[]
  workoutPlans    WorkoutPlan[]
  workoutSessions WorkoutSession[]

  @@map("users")
}

model Exercise {
  id                      Int                      @id @default(autoincrement())
  name                    String
  muscle_group            String?
  description             String?
  workoutPlanExercises    WorkoutPlanExercise[]
  workoutSessionExercises WorkoutSessionExercise[]

  @@map("exercises")
}

model Food {
  id               Int              @id @default(autoincrement())
  name             String
  weight           Float
  calories         Float
  protein          Float
  carbs            Float
  fat              Float
  userId           Int
  is_public        Boolean          @default(false)
  foodDiaryEntries FoodDiaryEntry[]
  user             User             @relation(fields: [userId], references: [id])
  mealFoods        MealFood[]

  @@map("foods")
}

model Badge {
  id          Int         @id @default(autoincrement())
  code        String      @unique
  title       String
  description String?
  userBadges  UserBadge[]

  @@map("badges")
}

model WorkoutPlan {
  id         Int                   @id @default(autoincrement())
  user_id    Int
  title      String
  start_date DateTime              @db.Date
  end_date   DateTime              @db.Date
  created_at DateTime              @default(now())
  exercises  WorkoutPlanExercise[]
  user       User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("workout_plans")
}

model WorkoutPlanExercise {
  plan_id     Int
  exercise_id Int
  day_of_week Int
  sets        Int
  reps        Int
  load_kg     Decimal?    @db.Decimal(5, 2)
  notes       String?
  exercise    Exercise    @relation(fields: [exercise_id], references: [id])
  plan        WorkoutPlan @relation(fields: [plan_id], references: [id], onDelete: Cascade)

  @@id([plan_id, exercise_id, day_of_week])
  @@map("workout_plan_exercises")
}

model WorkoutSession {
  id           Int                      @id @default(autoincrement())
  user_id      Int
  date         DateTime                 @db.Date
  completed_at DateTime?
  notes        String?
  exercises    WorkoutSessionExercise[]
  user         User                     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("workout_sessions")
}

model WorkoutSessionExercise {
  session_id     Int
  exercise_id    Int
  actual_sets    Int
  actual_reps    Int
  actual_load_kg Decimal?       @db.Decimal(5, 2)
  comments       String?
  exercise       Exercise       @relation(fields: [exercise_id], references: [id])
  session        WorkoutSession @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@id([session_id, exercise_id])
  @@map("workout_session_exercises")
}

model FoodDiary {
  id         Int              @id @default(autoincrement())
  user_id    Int
  date       DateTime         @db.Date
  created_at DateTime         @default(now())
  user       User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  entries    FoodDiaryEntry[]

  @@map("food_diary")
}

model FoodDiaryEntry {
  diary_id  Int
  food_id   Int
  portion_g Decimal   @db.Decimal(7, 2)
  diary     FoodDiary @relation(fields: [diary_id], references: [id], onDelete: Cascade)
  food      Food      @relation(fields: [food_id], references: [id])

  @@id([diary_id, food_id])
  @@map("food_diary_entries")
}

model PointsLog {
  id         Int      @id @default(autoincrement())
  user_id    Int
  points     Int
  reason     String?
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("points_log")
}

model UserBadge {
  user_id    Int
  badge_id   Int
  awarded_at DateTime @default(now())
  badge      Badge    @relation(fields: [badge_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, badge_id])
  @@map("user_badges")
}

model DeviceData {
  id              Int      @id @default(autoincrement())
  user_id         Int
  date            DateTime @db.Date
  steps           Int?
  calories_burned Int?
  heart_rate_avg  Int?
  created_at      DateTime @default(now())
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("device_data")
}

model UserFeedback {
  id         Int      @id @default(autoincrement())
  user_id    Int?
  name       String?
  sentiment  Int?
  comment    String
  created_at DateTime @default(now())
  user       User?    @relation(fields: [user_id], references: [id])

  @@map("user_feedback")
}

model NutritionGoals {
  id       Int  @id @default(autoincrement())
  calories Int
  protein  Int
  carbs    Int
  fat      Int
  userId   Int  @unique
  user     User @relation(fields: [userId], references: [id])
}

model MealPlan {
  id        Int     @id @default(autoincrement())
  name      String
  date      String
  notes     String?
  userId    Int
  is_public Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  meals     Meal[]

  @@map("meal_plans")
}

model Meal {
  id         Int        @id @default(autoincrement())
  name       String
  time       String?
  mealPlanId Int
  mealFoods  MealFood[]
  mealPlan   MealPlan   @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)

  @@map("meals")
}

model MealFood {
  id       Int   @id @default(autoincrement())
  quantity Float
  mealId   Int
  foodId   Int
  food     Food  @relation(fields: [foodId], references: [id])
  meal     Meal  @relation(fields: [mealId], references: [id], onDelete: Cascade)

  @@map("meal_foods")
}
