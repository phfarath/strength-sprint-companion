import React, { useState, useRef, useEffect } from 'react';
import Layout from '@/components/layout/Layout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useAppContext } from '@/context/AppContext';
import { useToast } from '@/components/ui/use-toast';
import { Loader2, Send, Dumbbell, Apple, FileText, Heart, MessageCircle, Bot, User } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

interface ChatMessage {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  mode: string;
}

const AIAssistant = () => {
  const { user, generateAIWorkoutPlan, generateAIMealPlan, generateAIHealthAssessment, analyzeAIHealthDocument, askAIQuestion } = useAppContext();
  const { toast } = useToast();
  
  const [chatMode, setChatMode] = useState('chat');
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [documentContent, setDocumentContent] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const chatModes = [
    { value: 'chat', label: 'Chat Geral', icon: MessageCircle, description: 'Converse sobre qualquer tópico de fitness e saúde' },
    { value: 'workout', label: 'Treinos', icon: Dumbbell, description: 'Criação e orientação sobre planos de treino' },
    { value: 'nutrition', label: 'Nutrição', icon: Apple, description: 'Planejamento alimentar e orientações nutricionais' },
    { value: 'health', label: 'Saúde', icon: Heart, description: 'Avaliações de saúde e recomendações gerais' },
    { value: 'document', label: 'Documentos', icon: FileText, description: 'Análise de documentos e exames de saúde' }
  ];

  const currentModeInfo = chatModes.find(mode => mode.value === chatMode);

  // Scroll para a última mensagem
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Adicionar mensagem ao chat
  const addMessage = (content: string, type: 'user' | 'ai') => {
    const newMessage: ChatMessage = {
      id: Date.now().toString(),
      type,
      content,
      timestamp: new Date(),
      mode: chatMode
    };
    setMessages(prev => [...prev, newMessage]);
  };

  // Função principal para enviar mensagem
  const handleSendMessage = async () => {
    if (!currentMessage.trim() && chatMode !== 'document') {
      toast({
        title: "Mensagem vazia",
        description: "Por favor, digite uma mensagem.",
        variant: "destructive"
      });
      return;
    }

    if (chatMode === 'document' && !documentContent.trim()) {
      toast({
        title: "Documento vazio",
        description: "Por favor, insira o conteúdo do documento para análise.",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsLoading(true);
      
      // Adicionar mensagem do usuário
      if (chatMode === 'document') {
        addMessage(`Analisar documento: ${documentContent.substring(0, 100)}...`, 'user');
      } else {
        addMessage(currentMessage, 'user');
      }

      let response;
      
      switch (chatMode) {
        case 'workout':
          response = await handleWorkoutMode();
          break;
        case 'nutrition':
          response = await handleNutritionMode();
          break;
        case 'health':
          response = await handleHealthMode();
          break;
        case 'document':
          response = await handleDocumentMode();
          break;
        default:
          response = await handleChatMode();
          break;
      }

      // Adicionar resposta da IA
      addMessage(response, 'ai');
      
      // Limpar inputs
      setCurrentMessage('');
      if (chatMode === 'document') {
        setDocumentContent('');
      }

    } catch (error) {
      console.error('Erro ao enviar mensagem:', error);
      toast({
        title: "Erro",
        description: "Não foi possível obter resposta da IA. Tente novamente.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Handlers específicos para cada modo
  const handleChatMode = async () => {
    const response = await askAIQuestion(currentMessage);
    return response.data.answer;
  };

  const handleWorkoutMode = async () => {
    const userData = {
      age: user?.birthdate ? Math.floor((new Date().getTime() - new Date(user.birthdate).getTime()) / (365.25 * 24 * 60 * 60 * 1000)) : null,
      weight: user?.weight,
      height: user?.height,
      goal: 'melhorar a saúde',
      fitnessLevel: 'intermediário',
      availableDays: 5,
      equipment: 'academia completa',
      injuries: 'nenhuma',
      preferences: 'musculação',
      customRequest: currentMessage
    };
    
    const response = await generateAIWorkoutPlan(userData);
    return response.data.workoutPlan;
  };

  const handleNutritionMode = async () => {
    const userData = {
      age: user?.birthdate ? Math.floor((new Date().getTime() - new Date(user.birthdate).getTime()) / (365.25 * 24 * 60 * 60 * 1000)) : null,
      weight: user?.weight,
      height: user?.height,
      goal: 'melhorar a saúde',
      customRequest: currentMessage
    };
    
    const nutritionalGoals = user?.nutritionGoals || {};
    
    const response = await generateAIMealPlan({ userData, nutritionalGoals });
    return response.data.mealPlan;
  };

  const handleHealthMode = async () => {
    const userData = {
      age: user?.birthdate ? Math.floor((new Date().getTime() - new Date(user.birthdate).getTime()) / (365.25 * 24 * 60 * 60 * 1000)) : null,
      weight: user?.weight,
      height: user?.height,
      gender: 'não informado',
      customRequest: currentMessage
    };
    
    const healthData = {
      bmi: user?.weight && user?.height ? (user.weight / Math.pow(user.height / 100, 2)).toFixed(1) : null,
      bodyFatPercentage: null,
      bloodPressure: 'não informado',
      restingHeartRate: null,
      activityLevel: 'moderado',
      sleepQuality: 'boa',
      stressLevel: 'moderado',
      medicalConditions: 'nenhuma',
      medications: 'nenhum',
      allergies: 'nenhuma'
    };
    
    const response = await generateAIHealthAssessment({ userData, healthData });
    return response.data.assessment;
  };

  const handleDocumentMode = async () => {
    const userData = {
      age: user?.birthdate ? Math.floor((new Date().getTime() - new Date(user.birthdate).getTime()) / (365.25 * 24 * 60 * 60 * 1000)) : null,
      weight: user?.weight,
      height: user?.height,
      gender: 'não informado',
      goal: 'melhorar a saúde'
    };
    
    const response = await analyzeAIHealthDocument({ documentContent, userData });
    return response.data.analysis;
  };

  // Placeholder para diferentes modos
  const getPlaceholder = () => {
    switch (chatMode) {
      case 'workout':
        return 'Ex: Crie um treino para hipertrofia focado em peito e costas...';
      case 'nutrition':
        return 'Ex: Preciso de um plano alimentar para ganho de massa muscular...';
      case 'health':
        return 'Ex: Como posso melhorar minha saúde cardiovascular?';
      case 'document':
        return 'Cole o conteúdo do documento de saúde no campo abaixo...';
      default:
        return 'Ex: Como devo estruturar meus treinos para ganho de massa muscular?';
    }
  };

  // Limpar chat ao mudar de modo
  const handleModeChange = (newMode: string) => {
    setChatMode(newMode);
    setCurrentMessage('');
    setDocumentContent('');
  };

  return (
    <Layout>
      <div className="flex flex-col h-[calc(100vh-80px)] max-w-none w-full">
        {/* Header fixo */}
        <div className="flex-shrink-0 border-b bg-white px-4 sm:px-6 py-4">
          <div className="max-w-4xl mx-auto">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
              <div>
                <h1 className="text-xl sm:text-2xl font-bold text-gray-900 flex items-center gap-2">
                  {currentModeInfo && <currentModeInfo.icon className="w-6 h-6 text-fitness-primary" />}
                  Assistente de IA
                </h1>
                <p className="text-sm text-gray-600 mt-1">
                  {currentModeInfo?.description || 'Sua assistente pessoal para treinos, nutrição, saúde e muito mais.'}
                </p>
              </div>
              <div className="w-full sm:w-64">
                <Select value={chatMode} onValueChange={handleModeChange}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {chatModes.map((mode) => (
                      <SelectItem key={mode.value} value={mode.value}>
                        <div className="flex items-center gap-2">
                          <mode.icon size={16} />
                          {mode.label}
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
        </div>

        {/* Área de mensagens - ocupa espaço disponível */}
        <div className="flex-1 overflow-hidden bg-gray-50">
          <div className="h-full max-w-4xl mx-auto flex flex-col">
            <div className="flex-1 overflow-y-auto px-4 sm:px-6 py-6">
              {messages.length === 0 ? (
                <div className="flex items-center justify-center h-full">
                  <div className="text-center text-gray-500 max-w-md">
                    <Bot className="w-16 h-16 mx-auto mb-6 text-gray-300" />
                    <h2 className="text-2xl font-bold text-gray-900 mb-4">
                      Olá! Como posso ajudar você hoje?
                    </h2>
                    <p className="text-gray-600 mb-6">
                      Selecione um modo de conversa e comece a conversar! Estou aqui para ajudar com treinos, nutrição, saúde e muito mais.
                    </p>
                    <div className="grid grid-cols-2 gap-3 text-sm">
                      <div className="bg-white rounded-lg p-3 border">
                        <Dumbbell className="w-5 h-5 text-fitness-primary mb-2" />
                        <p className="font-medium">Treinos</p>
                        <p className="text-gray-500 text-xs">Planos personalizados</p>
                      </div>
                      <div className="bg-white rounded-lg p-3 border">
                        <Apple className="w-5 h-5 text-fitness-primary mb-2" />
                        <p className="font-medium">Nutrição</p>
                        <p className="text-gray-500 text-xs">Dietas balanceadas</p>
                      </div>
                      <div className="bg-white rounded-lg p-3 border">
                        <Heart className="w-5 h-5 text-fitness-primary mb-2" />
                        <p className="font-medium">Saúde</p>
                        <p className="text-gray-500 text-xs">Orientações gerais</p>
                      </div>
                      <div className="bg-white rounded-lg p-3 border">
                        <FileText className="w-5 h-5 text-fitness-primary mb-2" />
                        <p className="font-medium">Documentos</p>
                        <p className="text-gray-500 text-xs">Análise de exames</p>
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="space-y-6">
                  {messages.map((message) => (
                    <motion.div
                      key={message.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3 }}
                      className={`flex gap-4 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      {message.type === 'ai' && (
                        <div className="w-10 h-10 rounded-full bg-fitness-primary flex items-center justify-center flex-shrink-0">
                          <Bot className="w-6 h-6 text-white" />
                        </div>
                      )}
                      <div className={`max-w-[85%] ${message.type === 'user' ? 'order-first' : ''}`}>
                        <div className={`rounded-2xl px-6 py-4 ${
                          message.type === 'user' 
                            ? 'bg-fitness-primary text-white ml-auto' 
                            : 'bg-white border text-gray-900 shadow-sm'
                        }`}>
                          <div className="whitespace-pre-wrap text-base leading-relaxed">
                            {message.content}
                          </div>
                        </div>
                        <div className={`text-xs text-gray-500 mt-2 px-2 ${
                          message.type === 'user' ? 'text-right' : 'text-left'
                        }`}>
                          {message.timestamp.toLocaleTimeString()}
                        </div>
                      </div>
                      {message.type === 'user' && (
                        <div className="w-10 h-10 rounded-full bg-gray-300 flex items-center justify-center flex-shrink-0">
                          <User className="w-6 h-6 text-gray-600" />
                        </div>
                      )}
                    </motion.div>
                  ))}
                  {isLoading && (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="flex gap-4 justify-start"
                    >
                      <div className="w-10 h-10 rounded-full bg-fitness-primary flex items-center justify-center">
                        <Bot className="w-6 h-6 text-white" />
                      </div>
                      <div className="bg-white border rounded-2xl px-6 py-4 shadow-sm">
                        <div className="flex items-center gap-3">
                          <Loader2 className="w-5 h-5 animate-spin text-fitness-primary" />
                          <span className="text-base text-gray-600">Pensando...</span>
                        </div>
                      </div>
                    </motion.div>
                  )}
                  <div ref={messagesEndRef} />
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Input fixo na parte inferior */}
        <div className="flex-shrink-0 border-t bg-white px-4 sm:px-6 py-4">
          <div className="max-w-4xl mx-auto">
            {chatMode === 'document' && (
              <div className="mb-4">
                <Label htmlFor="document" className="text-sm font-medium text-gray-700">
                  Documento de Saúde
                </Label>
                <Textarea
                  id="document"
                  value={documentContent}
                  onChange={(e) => setDocumentContent(e.target.value)}
                  placeholder="Cole aqui o conteúdo do seu documento de saúde (exames, relatórios médicos, etc.)"
                  className="mt-2 min-h-[120px] resize-none"
                  disabled={isLoading}
                />
              </div>
            )}
            
            <div className="flex gap-3 items-end">
              <div className="flex-1">
                <Textarea
                  value={currentMessage}
                  onChange={(e) => setCurrentMessage(e.target.value)}
                  placeholder={getPlaceholder()}
                  className="resize-none border-gray-300 focus:border-fitness-primary focus:ring-fitness-primary"
                  rows={3}
                  disabled={isLoading || (chatMode === 'document' && !documentContent.trim())}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault();
                      handleSendMessage();
                    }
                  }}
                />
              </div>
              <Button 
                onClick={handleSendMessage}
                disabled={isLoading || (!currentMessage.trim() && chatMode !== 'document') || (chatMode === 'document' && !documentContent.trim())}
                size="lg"
                className="h-auto px-6 py-3 bg-fitness-primary hover:bg-fitness-primary/90"
              >
                {isLoading ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  <Send className="w-5 h-5" />
                )}
              </Button>
            </div>
            
            <div className="flex justify-between items-center mt-3">
              <p className="text-xs text-gray-500">
                Pressione Enter para enviar, Shift+Enter para nova linha
              </p>
              {messages.length > 0 && (
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={() => setMessages([])}
                  className="text-xs text-gray-500 hover:text-gray-700"
                >
                  Limpar Chat
                </Button>
              )}
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default AIAssistant;

